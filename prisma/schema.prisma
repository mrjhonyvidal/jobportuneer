// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id                    String             @id @default(uuid())
  clerkId               String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  position              String
  company               String
  location              String
  salary                String?
  salaryAsked           String?
  salaryRange           String?
  salaryOffered         String?
  status                String             // Enum : Applied, Interviewing, Offered, Rejected, etc. 
  workType              String             // Enum: Hybrid, Onsite, Remote, etc.
  employmentType        String             // Enum: Full-Time, Part-Time, etc.
  description           String?
  experienceRequired    Int?
  priority              String?
  requirements          String[]
  benefits              String[]
  dateApplied           DateTime?
  interviewStages       Int?                
  sentFollowupToRecruiter Boolean          @default(false)
  jobSource             String
  urlJobSource          String?            
}

model InterviewStage {
  id                    String             @id @default(uuid())
  clerkId               String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  jobId                 String             // Relation field
  stageName             String
  description           String?
  status                String             // Enum: Pending, Done-Waiting Response, Passed, Cancelled
  scheduledDate         DateTime?
  durationMinutes       Int?
  interviewNotes        String?
  feedbackNotes         String?
}

model Preference {
  id                        String    @id @default(uuid())
  clerkId                   String    // User ID (foreign key to users table)
  followUpFrequencyDays     Int?      // Follow-up frequency in days
  remindBeforeInterviewDays Int?      // Days before an interview reminder
  jobApplicationDeadlineDays Int?     // Days before a job application deadline reminder
  newJobMatches             Boolean   @default(false) // Notify about new job matches
  notifyJobStatusChange     Boolean   @default(true)  // Notify on job status change
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model NotificationChannel {
  id          String    @id @default(uuid())
  preferenceId String    // Foreign key to Preference
  channel     String     // Enum: EMAIL, SMS, PUSH
  enabled     Boolean    @default(false)
}

model PreferenceChangeLog {
  id          String    @id @default(uuid())
  preferenceId String    // Foreign key to Preference
  changedBy   String     // Clerk ID or system identifier
  field       String     // Changed field name
  oldValue    String?
  newValue    String
  timestamp   DateTime   @default(now())
}

model Reminder {
  id              String    @id @default(uuid())
  clerkId         String    // User ID (foreign key to users table)
  jobId           String
  reminderDate    DateTime  // When the notification should be sent
  type            String    // Enum: Follow-Up, Interview Reminder, Job Application Deadline, etc.
  deliveryMethod  String    // Enum: Email, SMS, Push Notification
  status          String    @default("PENDING") // Enum: PENDING, SENT, FAILED
  notes           String?   // Optional notes for the reminder
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Contact {
  id                    String             @id @default(uuid())
  clerkId               String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  jobId                 String             // Relation field          
  contactName           String
  role                  String             // Enum: Recruiter, Hiring Manager, Interviewer
  email                 String
  phone                 String?
  company               String?
  notes                 String?
}

model Tip {
  id                    String             @id @default(uuid())
  clerkId               String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  jobId                 String?            // Optional relation field
  interviewStageId      String?            // Optional relation field
  title                 String
  content               String
  category              String             // Enum: Resume, Interview, Negotiation, etc.
}

model Feedback {
  id        String   @id @default(uuid())
  clerkId   String   // User ID from Clerk
  feedback  String   @db.Text
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  allowShareMyFeedbackPublic Boolean @default(true)
}